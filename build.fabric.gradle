plugins {
    id 'fabric-loom' version '1.2+'
    id 'maven-publish'
}

group = "team.creative"

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = "https://maven.minecraftforge.net/"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "maven.modrinth:modmenu:${project.modmenu_version}"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
    implementation project(path: ':CreativeCore', configuration: 'namedElements')
}

processResources {
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_name", project.mod_name
    inputs.property "mod_version", project.mod_version
    inputs.property "mod_description", project.mod_description
    inputs.property "mod_license", project.mod_license
    inputs.property "loader_version_range", project.loader_version_range
    inputs.property "minecraft_version_range", project.minecraft_version_range
    inputs.property "creativecore_version", project.creativecore_version
    
    inputs.property "resource_pack_format", project.resource_pack_format
    inputs.property "data_pack_format", project.data_pack_format
    
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
	    expand(
	        "mod_id": project.mod_id,
	        "mod_name": project.mod_name,
	        "mod_version": project.mod_version,
	        "mod_description": project.mod_description,
	        "mod_license": project.mod_license,
	        "loader_version_range": project.loader_version_range,
	        "minecraft_version_range": project.minecraft_version_range,
	        "creativecore_version": project.creativecore_version
	    )
    }
    
    filesMatching("pack.mcmeta") {
        expand "mod_id": project.mod_id, "resource_pack_format": project.resource_pack_format, "data_pack_format": project.data_pack_format
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }

    options.compilerArgs += ["-Xmaxerrs", "1000"];
}

loom.mixin {
    defaultRefmapName = "itemphysic.mixin.refmap.json"
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.mod_name
}

remapJar {
	archiveFileName = project.mod_name + "_FABRIC_v" + project.mod_version + "_mc" + project.minecraft_version + ".jar"
}

jar {
    from("LICENSE") {
        rename { "${it}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        mavenLocal()
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
