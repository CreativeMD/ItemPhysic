plugins {
    id 'fabric-loom' version '1.4+'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4+'
}

group = "team.creative"

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = "https://maven.minecraftforge.net/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "maven.modrinth:modmenu:${project.modmenu_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
    implementation project(path: ':CreativeCore', configuration: 'namedElements')
}

processResources {
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_name", project.mod_name
    inputs.property "mod_version", project.mod_version
    inputs.property "mod_description", project.mod_description
    inputs.property "mod_license", project.mod_license
    inputs.property "loader_version_range", project.loader_version_range
    inputs.property "minecraft_version_range", project.minecraft_version_range
    inputs.property "creativecore_version", project.creativecore_version
    
    inputs.property "resource_pack_format", project.resource_pack_format
    inputs.property "data_pack_format", project.data_pack_format
    
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
	    expand(
	        "mod_id": project.mod_id,
	        "mod_name": project.mod_name,
	        "mod_version": project.mod_version,
	        "mod_description": project.mod_description,
	        "mod_license": project.mod_license,
	        "loader_version_range": project.loader_version_range,
	        "minecraft_version_range": project.minecraft_version_range,
	        "creativecore_version": project.creativecore_version
	    )
    }
    
    filesMatching("pack.mcmeta") {
        expand "mod_id": project.mod_id, "resource_pack_format": project.resource_pack_format, "data_pack_format": project.data_pack_format
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }

    options.compilerArgs += ["-Xmaxerrs", "1000"];
}

loom.mixin {
    defaultRefmapName = "itemphysic.mixin.refmap.json"
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.mod_name
}

remapJar {
	archiveFileName = project.mod_name + "_FABRIC_v" + project.mod_version + "_mc" + project.minecraft_version + ".jar"
}

jar {
    from("LICENSE") {
        rename { "${it}" }
    }
}

String getChangelogText() {
    String result = ''
    boolean first = true
    file('changelog.txt').readLines().find {
        if (first) {
            if (it.equals(project.mod_version)) {
                first = false
            }
            return false
        } else if (!it?.trim()) {
            return true
        } else {
            result += "* " + it + "\n"
            return false
        }
    }
    
    return result
}

task upload(type: GradleBuild) {
    description 'Uploads new version to modrinth and curseforge.'
    group = 'publishing'
    tasks = ['modrinth', 'curseforge']
}

gradle.taskGraph.whenReady {
    if (it.hasTask(tasks.modrinth) || it.hasTask(tasks.curseforge)) {
        if (!getChangelogText()?.trim()) {
            throw new GradleException('No changelog provided')
        }
    }
}

tasks.modrinth.enabled = System.getenv("MODRINTH_TOKEN") != null
tasks.modrinth.group = 'publishing'

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.mod_id
    versionNumber = project.mod_version
    versionType = project.release_type
    uploadFile = remapJar
    gameVersions = [ project.minecraft_version ]
    loaders = [ "fabric" ]
    changelog = getChangelogText()
    dependencies {
        required.project "fabric-api"
        required.project "creativecore"
    }
}

tasks.curseforge.enabled = System.getenv("CURSEFORGE_TOKEN") != null
tasks.curseforge.group = 'publishing'

curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN")
    project {
        id = project.curse_id
        changelogType = "markdown"
        changelog = getChangelogText()
        addGameVersion project.minecraft_version
        addGameVersion "Fabric"
        releaseType = project.release_type
        mainArtifact(remapJar) {
        }
        relations {
            requiredLibrary "fabric-api"
            requiredLibrary "creativecore"
        }
    }
}
